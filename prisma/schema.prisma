// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              String   @id @default(cuid())
  name            String   @db.VarChar(255)
  category        String   @db.VarChar(255)
  shop_name       String   @db.VarChar(255)
  image_url       String   @db.VarChar(255)
  url             String   @db.VarChar(255)
  product_rating  Float 
  price           Float
  description     String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("products")
}

model User {
  uid             String    @id
  name            String?   @db.VarChar(100)
  email           String    @unique
  age             Int?
  gender          String?   @db.VarChar(100)
  profile_picture String?   @db.VarChar(255)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  model_predict          ModelPredict[]

  @@map("users")
}

model Article {
  id            String   @id @default(cuid()) 
  title         String   @db.VarChar(255)
  content       String?  @db.Text
  image_url     String   @db.VarChar(255)
  url           String   @db.VarChar(255)
  publish_date  DateTime? @db.Date
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("articles")
}

model ModelPredict {
  id          String   @id @default(cuid())
  user_id         String
  image_url   String   @db.VarChar(255)
  acne_type   String   @db.VarChar(255)
  result      ModelResult?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user        User     @relation(fields: [user_id], references: [uid])
  @@index([user_id])
  @@map("model_predicts")
}

model ModelResult {
  id                  String   @id @default(cuid())
  predict_id          String   @unique
  skin_type           String   @db.VarChar(255)
  product_category    String   @db.VarChar(255)
  ingredient          String[]
  msg_recommendation  String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  model_predicts      ModelPredict @relation(fields: [predict_id], references: [id])

  @@index([predict_id])
  @@map("model_results")
}